#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# PREMIGRATE SOURCE DST remote_system_dir vmid dsid template
#  - SOURCE is the host where the VM is running
#  - DST is the host where the VM is to be migrated
#  - remote_system_dir is the path for the VM home in the system datastore
#  - vmid is the id of the VM
#  - dsid is the target datastore
#  - template is the template of the VM in XML and base64 encoded

SRC_HOST=$1
DST_HOST=$2

DST_PATH=$3

VMID=$4
DSID=$5

if [ ! -t 0 ]; then
  TEMPLATE_64=$(cat)
else
  TEMPLATE_64=$(onevm show -x "$VMID" | base64 | tr -d '\n')
fi

#--------------------------------------------------------------------------------

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON
source ${DRIVER_PATH}/../../datastore/libfs.sh
source ${DRIVER_PATH}/../../etc/datastore/linstor_un/linstor_un.conf
source ${DRIVER_PATH}/../../datastore/linstor_un/linstor_utils.sh


#--------------------------------------------------------------------------------

if [ "$SRC_HOST" == "$DST_HOST" ]; then
    log "Not moving $SRC_HOST to $DST_HOST, they are the same host"
    exit 0
fi

#--------------------------------------------------------------------------------

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onedatastore show -x $DSID | $XPATH \
                    /DATASTORE/TEMPLATE/LS_CONTROLLERS \
                    /DATASTORE/TEMPLATE/LS_CERTFILE \
                    /DATASTORE/TEMPLATE/LS_KEYFILE \
                    /DATASTORE/TEMPLATE/LS_CAFILE \
                    /DATASTORE/TEMPLATE/DISKLESS_POOL)

LS_CONTROLLERS="${XPATH_ELEMENTS[j++]}"
LS_CERTFILE="${XPATH_ELEMENTS[j++]}"
LS_KEYFILE="${XPATH_ELEMENTS[j++]}"
LS_CAFILE="${XPATH_ELEMENTS[j++]}"
DISKLESS_POOL="${XPATH_ELEMENTS[j++]:-DfltDisklessStorPool}"

linstor_load_keys

DST_PATH_DIRNAME=`dirname $DST_PATH`
DST_PATH_BASENAME=`basename $DST_PATH`

ssh_make_path "$DST_HOST" "$DST_PATH"

log "Moving $SRC_HOST:$DST_PATH to $DST_HOST:$DST_PATH"

ssh_exec_and_log "$DST_HOST" "rm -rf '$DST_PATH'" \
    "Error removing target path to prevent overwrite errors"

TAR_SSH=$(cat <<EOF
set -e -o pipefail
$TAR -C $DST_PATH_DIRNAME --sparse -cf - $DST_PATH_BASENAME | $SSH $DST_HOST '$TAR -C $DST_PATH_DIRNAME --sparse -xf -'
EOF
)

# ssh_forward function was introduced in OpenNebula 5.12
# try keeping support for older versions
if declare -F ssh_forward >/dev/null; then
    ssh_forward ssh_exec_and_log "$SRC_HOST" "$TAR_SSH" \
        "Error copying disk directory to target host"
else
    ssh_exec_and_log "$SRC_HOST" "$TAR_SSH" \
        "Error copying disk directory to target host"
fi

VM_XML=$(onevm show -x $VMID)
DISK_IDS="$(echo "$VM_XML" | $XPATH \
                    '%m%/VM/TEMPLATE/DISK[TM_MAD="linstor_un"]/DISK_ID')"

for DISK_ID in $DISK_IDS; do

    unset i j XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(echo "$VM_XML" | $XPATH \
                        "/VM/TEMPLATE/DISK[DISK_ID=\"$DISK_ID\"]/IMAGE_ID" \
                        "/VM/TEMPLATE/DISK[DISK_ID=\"$DISK_ID\"]/CLONE")

    IMAGE_ID="${XPATH_ELEMENTS[j++]}"
    CLONE="${XPATH_ELEMENTS[j++]}"

    if [ "$CLONE" != "NO" ]; then
        DST_RES="one-vm-$VMID-disk-$DISK_ID"
    else
        DST_RES="one-image-$IMAGE_ID"
    fi

    # Attach diskless resource on destination host
    linstor_attach_diskless "$DST_HOST" "$DST_RES" "$DISKLESS_POOL"

    # Set allow-two-primaries=yes
    linstor_exec_and_log \
        "resource-definition set-property $DST_RES DrbdOptions/Net/allow-two-primaries yes"

done

migrate_other "$@"

exit 0
